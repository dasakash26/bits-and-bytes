// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
/*
interface User {
  id: string;
  name?: string;
  email: string;
  emailVerified?: Date;
  image?: string;
  username?: string;
  bio?: string;
  title?: string;
  location?: string;
  website?: string;
  twitter?: string;
  github?: string;
  linkedin?: string;
  postsCount: number;
  badges: string[];
  createdAt: Date;
  updatedAt: Date;
} 
*/
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?
  title         String?
  location      String?
  website       String?
  twitter       String?
  github        String?
  linkedin      String?
  postsCount    Int       @default(0)
  badges        String[]  @default([]) 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  author   Author?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlogPost {
  id           String   @id @default(cuid())
  title        String
  slug         String   @unique
  excerpt     String?
  content      String
  image        String?
  date         DateTime @default(now())
  readTime     String?
  likeCount    Int      @default(0)
  commentCount Int      @default(0)
  viewCount    Int      @default(0)

  // Relations
  authorId String
  author   Author @relation(fields: [authorId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  tags String[] // Stored as a text[] in PostgreSQL
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  icon        String?

  posts BlogPost[]
}

model Author {
  id     String  @id @default(cuid())
  name   String
  avatar String?
  bio    String?

  // Social Links
  twitter  String?
  github   String?
  linkedin String?

  // Link to User
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  posts BlogPost[]
}
