generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?
  title         String?
  location      String?
  website       String?
  twitter       String?
  github        String?
  linkedin      String?
  badges        String[]  @default([])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  comments  Comment[]
  likes     Like[]
  views     View[]
  posts BlogPost[]
  savedPosts BlogPost[] @relation("SavedPosts")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlogPost {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  excerpt   String?
  content   String
  image     String?
  date      DateTime  @default(now())
  readTime  String?
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tags      String[]

  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  savedBy    User[]   @relation("SavedPosts")
  likes      Like[]
  views      View[]

  @@index([slug], name: "idx_blogpost_slug")
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  icon        String?

  posts BlogPost[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author  User      @relation(fields: [authorId], references: [id])
  post    BlogPost  @relation(fields: [postId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User     @relation(fields: [userId], references: [id])
  post BlogPost @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model View {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User     @relation(fields: [userId], references: [id])
  post BlogPost @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}
